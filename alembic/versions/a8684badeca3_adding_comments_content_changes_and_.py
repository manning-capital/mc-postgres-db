"""Adding comments, content changes, and sentiment tables.

Revision ID: a8684badeca3
Revises: 5caaba3e0458
Create Date: 2025-07-12 16:17:25.399285

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'a8684badeca3'
down_revision: Union[str, Sequence[str], None] = '5caaba3e0458'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('sentiment_type',
    sa.Column('id', sa.Integer(), nullable=False, comment='The unique identifier of the sentiment type'),
    sa.Column('name', sa.String(length=100), nullable=False, comment='The name of the sentiment type'),
    sa.Column('description', sa.String(length=1000), nullable=True, comment='The description of the sentiment type'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether the sentiment type is active'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False, comment='The timestamp of the creation of the sentiment type'),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False, comment='The timestamp of the last update of the sentiment type'),
    sa.PrimaryKeyConstraint('id'),
    comment='The type of sentiment in terms of the calculation method, e.g. PROVIDER, NLTK, VADER, etc. This is meant to store the sentiment type that is used to calculate the sentiment of a provider content.'
    )
    op.create_table('provider_content_sentiment',
    sa.Column('provider_content_id', sa.Integer(), nullable=False, comment='The identifier of the provider content'),
    sa.Column('sentiment_type_id', sa.Integer(), nullable=False, comment='The identifier of the sentiment type'),
    sa.Column('sentiment_text', sa.String(length=1000), nullable=True, comment='The sentiment score text of the content that is internally calculated, this is a text that describes the sentiment score.'),
    sa.Column('positive_sentiment_score', sa.Float(), nullable=True, comment='The positive sentiment score of the content that is internally calculated, this is a normalized score between 0 and 1, where 0 is the lowest sentiment and 1 is the highest sentiment.'),
    sa.Column('negative_sentiment_score', sa.Float(), nullable=True, comment='The negative sentiment score of the provider content that is internally calculated, this is a normalized score between 0 and 1, where 0 is the lowest sentiment and 1 is the highest sentiment.'),
    sa.Column('neutral_sentiment_score', sa.Float(), nullable=True, comment='The neutral sentiment score of the provider content that is internally calculated, this is a normalized score between 0 and 1, where 0 is the lowest sentiment and 1 is the highest sentiment.'),
    sa.Column('sentiment_score', sa.Float(), nullable=True, comment='The sentiment score of the provider content that is internally calculated, this is a normalized score between 0 and 1, where 0 is the lowest sentiment and 1 is the highest sentiment.'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False, comment='The timestamp of the creation of the provider content sentiment'),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False, comment='The timestamp of the last update of the provider content sentiment'),
    sa.ForeignKeyConstraint(['provider_content_id'], ['provider_content.id'], ),
    sa.ForeignKeyConstraint(['sentiment_type_id'], ['sentiment_type.id'], ),
    sa.PrimaryKeyConstraint('provider_content_id', 'sentiment_type_id'),
    comment='The provider content sentiment, will store the sentiment of a provider content. This is meant to store the sentiment of a provider content that is internally calculated.'
    )
    op.alter_column('asset', 'id',
               existing_type=sa.INTEGER(),
               comment='The unique identifier of the asset',
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('asset_id_seq'::regclass)"))
    op.alter_column('asset', 'asset_type_id',
               existing_type=sa.INTEGER(),
               comment='The identifier of the asset type',
               existing_nullable=False)
    op.alter_column('asset', 'name',
               existing_type=sa.VARCHAR(length=100),
               comment='The name of the asset',
               existing_nullable=False)
    op.alter_column('asset', 'description',
               existing_type=sa.VARCHAR(),
               comment='The description of the asset',
               existing_nullable=True)
    op.alter_column('asset', 'symbol',
               existing_type=sa.VARCHAR(length=100),
               comment='The symbol of the asset',
               existing_nullable=True)
    op.alter_column('asset', 'underlying_asset_id',
               existing_type=sa.INTEGER(),
               comment='The identifier of the underlying asset',
               existing_nullable=True)
    op.alter_column('asset', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment='Whether the asset is active',
               existing_nullable=False)
    op.alter_column('asset', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='The timestamp of the creation of the asset',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('asset', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='The timestamp of the last update of the asset',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.create_table_comment(
        'asset',
        'The asset, e.g. stock, bond, currency, etc.',
        existing_comment=None,
        schema=None
    )
    op.alter_column('asset_content', 'content_id',
               existing_type=sa.INTEGER(),
               comment='The identifier of the provider content',
               existing_nullable=False)
    op.alter_column('asset_content', 'asset_id',
               existing_type=sa.INTEGER(),
               comment='The identifier of the asset',
               existing_nullable=False)
    op.alter_column('asset_content', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='The timestamp of the creation of the asset content',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.create_table_comment(
        'asset_content',
        'The asset content, will store the relationship between an asset and a provider content.',
        existing_comment=None,
        schema=None
    )
    op.alter_column('asset_type', 'id',
               existing_type=sa.INTEGER(),
               comment='The unique identifier of the asset type',
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('asset_type_id_seq'::regclass)"))
    op.alter_column('asset_type', 'name',
               existing_type=sa.VARCHAR(length=100),
               comment='The name of the asset type',
               existing_nullable=False)
    op.alter_column('asset_type', 'description',
               existing_type=sa.VARCHAR(length=1000),
               comment='The description of the asset type',
               existing_nullable=True)
    op.alter_column('asset_type', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment='Whether the asset type is active',
               existing_nullable=False)
    op.alter_column('asset_type', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='The timestamp of the creation of the asset type',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('asset_type', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='The timestamp of the last update of the asset type',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.create_table_comment(
        'asset_type',
        'The type of asset, e.g. stock, bond, currency, etc.',
        existing_comment=None,
        schema=None
    )
    op.alter_column('content_type', 'id',
               existing_type=sa.INTEGER(),
               comment='The unique identifier of the content type',
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('content_type', 'name',
               existing_type=sa.VARCHAR(length=100),
               comment='The name of the content type',
               existing_nullable=False)
    op.alter_column('content_type', 'description',
               existing_type=sa.VARCHAR(length=1000),
               comment='The description of the content type',
               existing_nullable=True)
    op.alter_column('content_type', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment='Whether the content type is active',
               existing_nullable=False)
    op.alter_column('content_type', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='The timestamp of the creation of the content type',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('content_type', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='The timestamp of the last update of the content type',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.create_table_comment(
        'content_type',
        'The type of content, e.g. news, social media, etc.',
        existing_comment=None,
        schema=None
    )
    op.add_column('provider', sa.Column('provider_external_code', sa.String(length=100), nullable=True, comment="The external code of the provider, this is used to identify the provider in the provider's system. For example, for a news provider, it could be the name of the provider or an internal ID."))
    op.add_column('provider', sa.Column('url', sa.String(length=1000), nullable=True, comment='The URL of the provider'))
    op.add_column('provider', sa.Column('image_url', sa.String(length=1000), nullable=True, comment="The URL of the provider's image"))
    op.alter_column('provider', 'id',
               existing_type=sa.INTEGER(),
               comment='The unique identifier of the provider',
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('provider_id_seq'::regclass)"))
    op.alter_column('provider', 'provider_type_id',
               existing_type=sa.INTEGER(),
               comment='The identifier of the provider type',
               existing_nullable=False)
    op.alter_column('provider', 'name',
               existing_type=sa.VARCHAR(length=100),
               comment='The name of the provider',
               existing_nullable=False)
    op.alter_column('provider', 'description',
               existing_type=sa.VARCHAR(length=1000),
               comment='The description of the provider',
               existing_nullable=True)
    op.alter_column('provider', 'underlying_provider_id',
               existing_type=sa.INTEGER(),
               comment='The identifier of the underlying provider',
               existing_nullable=True)
    op.alter_column('provider', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment='Whether the provider is active',
               existing_nullable=False)
    op.alter_column('provider', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='The timestamp of the creation of the provider',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('provider', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='The timestamp of the last update of the provider',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.create_table_comment(
        'provider',
        'The provider, e.g. data vendor, news, social media, etc.',
        existing_comment=None,
        schema=None
    )
    op.drop_column('provider', 'symbol')
    op.alter_column('provider_asset', 'date',
               existing_type=sa.DATE(),
               comment='The date of the provider asset',
               existing_nullable=False)
    op.alter_column('provider_asset', 'provider_id',
               existing_type=sa.INTEGER(),
               comment='The identifier of the provider',
               existing_nullable=False)
    op.alter_column('provider_asset', 'asset_id',
               existing_type=sa.INTEGER(),
               comment='The identifier of the asset',
               existing_nullable=False)
    op.alter_column('provider_asset', 'asset_code',
               existing_type=sa.VARCHAR(length=100),
               comment="The code of the asset, this is used to identify the asset in the provider's system. For example, for a stock, it could be the ticker symbol or an internal ID.",
               existing_nullable=False)
    op.alter_column('provider_asset', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment='Whether the provider asset is active',
               existing_nullable=False)
    op.alter_column('provider_asset', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='The timestamp of the creation of the provider asset',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('provider_asset', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='The timestamp of the last update of the provider asset',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.create_table_comment(
        'provider_asset',
        "The provider asset, is meant to map our internal definitions to the provider's definitions.",
        existing_comment=None,
        schema=None
    )
    op.alter_column('provider_asset_market', 'timestamp',
               existing_type=postgresql.TIMESTAMP(),
               comment='The timestamp of the provider asset market',
               existing_nullable=False)
    op.alter_column('provider_asset_market', 'provider_id',
               existing_type=sa.INTEGER(),
               comment='The identifier of the provider',
               existing_nullable=False)
    op.alter_column('provider_asset_market', 'asset_id',
               existing_type=sa.INTEGER(),
               comment='The identifier of the asset',
               existing_nullable=False)
    op.alter_column('provider_asset_market', 'close',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='The closing price of the provider asset market',
               existing_comment='Closing price',
               existing_nullable=True)
    op.alter_column('provider_asset_market', 'open',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='The opening price of the provider asset market',
               existing_comment='Opening price',
               existing_nullable=True)
    op.alter_column('provider_asset_market', 'high',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='The highest price of the provider asset market',
               existing_comment='Highest price',
               existing_nullable=True)
    op.alter_column('provider_asset_market', 'low',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='The lowest price of the provider asset market',
               existing_comment='Lowest price',
               existing_nullable=True)
    op.alter_column('provider_asset_market', 'volume',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='The volume traded of the provider asset market',
               existing_comment='Volume traded',
               existing_nullable=True)
    op.alter_column('provider_asset_market', 'best_bid',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='The best bid price of the provider asset market',
               existing_comment='Best bid price',
               existing_nullable=True)
    op.alter_column('provider_asset_market', 'best_ask',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='The best ask price of the provider asset market',
               existing_comment='Best ask price',
               existing_nullable=True)
    op.create_table_comment(
        'provider_asset_market',
        'The provider asset market, will store market data for an asset from a provider.',
        existing_comment=None,
        schema=None
    )
    op.alter_column('provider_asset_order', 'id',
               existing_type=sa.INTEGER(),
               comment='The unique identifier of the provider asset order',
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('provider_asset_order', 'timestamp',
               existing_type=postgresql.TIMESTAMP(),
               comment='The timestamp of the provider asset order',
               existing_nullable=False)
    op.alter_column('provider_asset_order', 'provider_id',
               existing_type=sa.INTEGER(),
               comment='The identifier of the provider',
               existing_nullable=False)
    op.alter_column('provider_asset_order', 'from_asset_id',
               existing_type=sa.INTEGER(),
               comment='The identifier of the from asset',
               existing_nullable=False)
    op.alter_column('provider_asset_order', 'to_asset_id',
               existing_type=sa.INTEGER(),
               comment='The identifier of the to asset',
               existing_nullable=False)
    op.alter_column('provider_asset_order', 'price',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='The price of the provider asset order',
               existing_nullable=True)
    op.alter_column('provider_asset_order', 'volume',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='The volume of the provider asset order',
               existing_nullable=True)
    op.create_table_comment(
        'provider_asset_order',
        'The provider asset order, will store order data for an asset from a provider.',
        existing_comment=None,
        schema=None
    )
    op.add_column('provider_content', sa.Column('content_external_code', sa.String(length=1000), nullable=False, comment='This is the external identifier for the content and will depend on the content provider and the type of content. For example, for a news article, it could be the URL of the article and for a social media post, it could be the post ID.'))
    op.alter_column('provider_content', 'id',
               existing_type=sa.INTEGER(),
               comment='The unique identifier of the provider content',
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('provider_content_id_seq'::regclass)"))
    op.alter_column('provider_content', 'timestamp',
               existing_type=postgresql.TIMESTAMP(),
               comment='The timestamp of the provider content',
               existing_nullable=False)
    op.alter_column('provider_content', 'provider_id',
               existing_type=sa.INTEGER(),
               comment='The identifier of the provider',
               existing_nullable=False)
    op.alter_column('provider_content', 'content_type_id',
               existing_type=sa.INTEGER(),
               comment='The identifier of the content type',
               existing_nullable=False)
    op.alter_column('provider_content', 'authors',
               existing_type=sa.VARCHAR(length=1000),
               comment='The authors of the provider content',
               existing_nullable=True)
    op.alter_column('provider_content', 'title',
               existing_type=sa.VARCHAR(length=1000),
               comment='The title of the provider content',
               existing_nullable=True)
    op.alter_column('provider_content', 'description',
               existing_type=sa.VARCHAR(length=5000),
               comment='A short description of the provider content',
               existing_comment='A short description of the content',
               existing_nullable=True)
    op.alter_column('provider_content', 'content',
               existing_type=sa.VARCHAR(),
               comment='The content of the provider content',
               existing_nullable=False)
    op.alter_column('provider_content', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='The timestamp of the creation of the provider content',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('provider_content', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='The timestamp of the last update of the provider content',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.create_table_comment(
        'provider_content',
        'The provider content, will store content data for a provider.',
        existing_comment=None,
        schema=None
    )
    op.drop_column('provider_content', 'provider_external_code')
    op.alter_column('provider_type', 'id',
               existing_type=sa.INTEGER(),
               comment='The unique identifier of the provider type',
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('provider_type_id_seq'::regclass)"))
    op.alter_column('provider_type', 'name',
               existing_type=sa.VARCHAR(length=100),
               comment='The name of the provider type',
               existing_nullable=False)
    op.alter_column('provider_type', 'description',
               existing_type=sa.VARCHAR(length=1000),
               comment='The description of the provider type',
               existing_nullable=True)
    op.alter_column('provider_type', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment='Whether the provider type is active',
               existing_nullable=False)
    op.alter_column('provider_type', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='The timestamp of the creation of the provider type',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('provider_type', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='The timestamp of the last update of the provider type',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.create_table_comment(
        'provider_type',
        'The type of provider, e.g. news, social media, etc.',
        existing_comment=None,
        schema=None
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table_comment(
        'provider_type',
        existing_comment='The type of provider, e.g. news, social media, etc.',
        schema=None
    )
    op.alter_column('provider_type', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='The timestamp of the last update of the provider type',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('provider_type', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='The timestamp of the creation of the provider type',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('provider_type', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='Whether the provider type is active',
               existing_nullable=False)
    op.alter_column('provider_type', 'description',
               existing_type=sa.VARCHAR(length=1000),
               comment=None,
               existing_comment='The description of the provider type',
               existing_nullable=True)
    op.alter_column('provider_type', 'name',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='The name of the provider type',
               existing_nullable=False)
    op.alter_column('provider_type', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='The unique identifier of the provider type',
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('provider_type_id_seq'::regclass)"))
    op.add_column('provider_content', sa.Column('provider_external_code', sa.VARCHAR(length=1000), autoincrement=False, nullable=False, comment='This is the external identifier for the content and will depend on the content provider and the type of content. For example, for a news article, it could be the URL of the article and for a social media post, it could be the post ID.'))
    op.drop_table_comment(
        'provider_content',
        existing_comment='The provider content, will store content data for a provider.',
        schema=None
    )
    op.alter_column('provider_content', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='The timestamp of the last update of the provider content',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('provider_content', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='The timestamp of the creation of the provider content',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('provider_content', 'content',
               existing_type=sa.VARCHAR(),
               comment=None,
               existing_comment='The content of the provider content',
               existing_nullable=False)
    op.alter_column('provider_content', 'description',
               existing_type=sa.VARCHAR(length=5000),
               comment='A short description of the content',
               existing_comment='A short description of the provider content',
               existing_nullable=True)
    op.alter_column('provider_content', 'title',
               existing_type=sa.VARCHAR(length=1000),
               comment=None,
               existing_comment='The title of the provider content',
               existing_nullable=True)
    op.alter_column('provider_content', 'authors',
               existing_type=sa.VARCHAR(length=1000),
               comment=None,
               existing_comment='The authors of the provider content',
               existing_nullable=True)
    op.alter_column('provider_content', 'content_type_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='The identifier of the content type',
               existing_nullable=False)
    op.alter_column('provider_content', 'provider_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='The identifier of the provider',
               existing_nullable=False)
    op.alter_column('provider_content', 'timestamp',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='The timestamp of the provider content',
               existing_nullable=False)
    op.alter_column('provider_content', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='The unique identifier of the provider content',
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('provider_content_id_seq'::regclass)"))
    op.drop_column('provider_content', 'content_external_code')
    op.drop_table_comment(
        'provider_asset_order',
        existing_comment='The provider asset order, will store order data for an asset from a provider.',
        schema=None
    )
    op.alter_column('provider_asset_order', 'volume',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment=None,
               existing_comment='The volume of the provider asset order',
               existing_nullable=True)
    op.alter_column('provider_asset_order', 'price',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment=None,
               existing_comment='The price of the provider asset order',
               existing_nullable=True)
    op.alter_column('provider_asset_order', 'to_asset_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='The identifier of the to asset',
               existing_nullable=False)
    op.alter_column('provider_asset_order', 'from_asset_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='The identifier of the from asset',
               existing_nullable=False)
    op.alter_column('provider_asset_order', 'provider_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='The identifier of the provider',
               existing_nullable=False)
    op.alter_column('provider_asset_order', 'timestamp',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='The timestamp of the provider asset order',
               existing_nullable=False)
    op.alter_column('provider_asset_order', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='The unique identifier of the provider asset order',
               existing_nullable=False,
               autoincrement=True)
    op.drop_table_comment(
        'provider_asset_market',
        existing_comment='The provider asset market, will store market data for an asset from a provider.',
        schema=None
    )
    op.alter_column('provider_asset_market', 'best_ask',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='Best ask price',
               existing_comment='The best ask price of the provider asset market',
               existing_nullable=True)
    op.alter_column('provider_asset_market', 'best_bid',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='Best bid price',
               existing_comment='The best bid price of the provider asset market',
               existing_nullable=True)
    op.alter_column('provider_asset_market', 'volume',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='Volume traded',
               existing_comment='The volume traded of the provider asset market',
               existing_nullable=True)
    op.alter_column('provider_asset_market', 'low',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='Lowest price',
               existing_comment='The lowest price of the provider asset market',
               existing_nullable=True)
    op.alter_column('provider_asset_market', 'high',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='Highest price',
               existing_comment='The highest price of the provider asset market',
               existing_nullable=True)
    op.alter_column('provider_asset_market', 'open',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='Opening price',
               existing_comment='The opening price of the provider asset market',
               existing_nullable=True)
    op.alter_column('provider_asset_market', 'close',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               comment='Closing price',
               existing_comment='The closing price of the provider asset market',
               existing_nullable=True)
    op.alter_column('provider_asset_market', 'asset_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='The identifier of the asset',
               existing_nullable=False)
    op.alter_column('provider_asset_market', 'provider_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='The identifier of the provider',
               existing_nullable=False)
    op.alter_column('provider_asset_market', 'timestamp',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='The timestamp of the provider asset market',
               existing_nullable=False)
    op.drop_table_comment(
        'provider_asset',
        existing_comment="The provider asset, is meant to map our internal definitions to the provider's definitions.",
        schema=None
    )
    op.alter_column('provider_asset', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='The timestamp of the last update of the provider asset',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('provider_asset', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='The timestamp of the creation of the provider asset',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('provider_asset', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='Whether the provider asset is active',
               existing_nullable=False)
    op.alter_column('provider_asset', 'asset_code',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment="The code of the asset, this is used to identify the asset in the provider's system. For example, for a stock, it could be the ticker symbol or an internal ID.",
               existing_nullable=False)
    op.alter_column('provider_asset', 'asset_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='The identifier of the asset',
               existing_nullable=False)
    op.alter_column('provider_asset', 'provider_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='The identifier of the provider',
               existing_nullable=False)
    op.alter_column('provider_asset', 'date',
               existing_type=sa.DATE(),
               comment=None,
               existing_comment='The date of the provider asset',
               existing_nullable=False)
    op.add_column('provider', sa.Column('symbol', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.drop_table_comment(
        'provider',
        existing_comment='The provider, e.g. data vendor, news, social media, etc.',
        schema=None
    )
    op.alter_column('provider', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='The timestamp of the last update of the provider',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('provider', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='The timestamp of the creation of the provider',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('provider', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='Whether the provider is active',
               existing_nullable=False)
    op.alter_column('provider', 'underlying_provider_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='The identifier of the underlying provider',
               existing_nullable=True)
    op.alter_column('provider', 'description',
               existing_type=sa.VARCHAR(length=1000),
               comment=None,
               existing_comment='The description of the provider',
               existing_nullable=True)
    op.alter_column('provider', 'name',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='The name of the provider',
               existing_nullable=False)
    op.alter_column('provider', 'provider_type_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='The identifier of the provider type',
               existing_nullable=False)
    op.alter_column('provider', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='The unique identifier of the provider',
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('provider_id_seq'::regclass)"))
    op.drop_column('provider', 'image_url')
    op.drop_column('provider', 'url')
    op.drop_column('provider', 'provider_external_code')
    op.drop_table_comment(
        'content_type',
        existing_comment='The type of content, e.g. news, social media, etc.',
        schema=None
    )
    op.alter_column('content_type', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='The timestamp of the last update of the content type',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('content_type', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='The timestamp of the creation of the content type',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('content_type', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='Whether the content type is active',
               existing_nullable=False)
    op.alter_column('content_type', 'description',
               existing_type=sa.VARCHAR(length=1000),
               comment=None,
               existing_comment='The description of the content type',
               existing_nullable=True)
    op.alter_column('content_type', 'name',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='The name of the content type',
               existing_nullable=False)
    op.alter_column('content_type', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='The unique identifier of the content type',
               existing_nullable=False,
               autoincrement=True)
    op.drop_table_comment(
        'asset_type',
        existing_comment='The type of asset, e.g. stock, bond, currency, etc.',
        schema=None
    )
    op.alter_column('asset_type', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='The timestamp of the last update of the asset type',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('asset_type', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='The timestamp of the creation of the asset type',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('asset_type', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='Whether the asset type is active',
               existing_nullable=False)
    op.alter_column('asset_type', 'description',
               existing_type=sa.VARCHAR(length=1000),
               comment=None,
               existing_comment='The description of the asset type',
               existing_nullable=True)
    op.alter_column('asset_type', 'name',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='The name of the asset type',
               existing_nullable=False)
    op.alter_column('asset_type', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='The unique identifier of the asset type',
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('asset_type_id_seq'::regclass)"))
    op.drop_table_comment(
        'asset_content',
        existing_comment='The asset content, will store the relationship between an asset and a provider content.',
        schema=None
    )
    op.alter_column('asset_content', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='The timestamp of the creation of the asset content',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('asset_content', 'asset_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='The identifier of the asset',
               existing_nullable=False)
    op.alter_column('asset_content', 'content_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='The identifier of the provider content',
               existing_nullable=False)
    op.drop_table_comment(
        'asset',
        existing_comment='The asset, e.g. stock, bond, currency, etc.',
        schema=None
    )
    op.alter_column('asset', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='The timestamp of the last update of the asset',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('asset', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='The timestamp of the creation of the asset',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('asset', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='Whether the asset is active',
               existing_nullable=False)
    op.alter_column('asset', 'underlying_asset_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='The identifier of the underlying asset',
               existing_nullable=True)
    op.alter_column('asset', 'symbol',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='The symbol of the asset',
               existing_nullable=True)
    op.alter_column('asset', 'description',
               existing_type=sa.VARCHAR(),
               comment=None,
               existing_comment='The description of the asset',
               existing_nullable=True)
    op.alter_column('asset', 'name',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='The name of the asset',
               existing_nullable=False)
    op.alter_column('asset', 'asset_type_id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='The identifier of the asset type',
               existing_nullable=False)
    op.alter_column('asset', 'id',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='The unique identifier of the asset',
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('asset_id_seq'::regclass)"))
    op.drop_table('provider_content_sentiment')
    op.drop_table('sentiment_type')
    # ### end Alembic commands ###
