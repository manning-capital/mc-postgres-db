"""Adding tables for storing asset group attributes

Revision ID: f0c8358fd98c
Revises: 0363c25292b7
Create Date: 2025-09-20 08:56:55.514332

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'f0c8358fd98c'
down_revision: Union[str, Sequence[str], None] = '0363c25292b7'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('asset_group',
    sa.Column('id', sa.Integer(), nullable=False, comment='The unique identifier of the asset group'),
    sa.Column('name', sa.String(length=100), nullable=False, comment='The name of the asset group'),
    sa.Column('description', sa.String(length=1000), nullable=True, comment='The description of the asset group'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether the asset group is active'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False, comment='The timestamp of the creation of the asset group'),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False, comment='The timestamp of the last update of the asset group'),
    sa.PrimaryKeyConstraint('id', name=op.f('asset_group_pkey')),
    comment='The asset group, will store groups of assets that share common attributes.'
    )
    op.create_table('asset_group_member',
    sa.Column('asset_group_id', sa.Integer(), nullable=False, comment='The identifier of the asset group'),
    sa.Column('asset_id', sa.Integer(), nullable=False, comment='The identifier of the asset'),
    sa.Column('order', sa.Integer(), nullable=True, comment='The order of the asset within the group (optional)'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False, comment='The timestamp of the creation of the asset group member'),
    sa.ForeignKeyConstraint(['asset_group_id'], ['asset_group.id'], ),
    sa.ForeignKeyConstraint(['asset_id'], ['asset.id'], ),
    sa.PrimaryKeyConstraint('asset_group_id', 'asset_id', name=op.f('asset_group_member_pkey')),
    comment='The asset group member, will store which assets belong to which groups.'
    )
    op.create_table('provider_asset_group_attribute',
    sa.Column('timestamp', sa.DateTime(), nullable=False, comment='The timestamp of the provider asset group attributes'),
    sa.Column('provider_id', sa.Integer(), nullable=False, comment='The identifier of the provider'),
    sa.Column('asset_group_id', sa.Integer(), nullable=False, comment='The identifier of the asset group'),
    sa.Column('lookback_window_seconds', sa.Integer(), nullable=False, comment='The lookback window in seconds used for the calculation'),
    sa.Column('cointegration_p_value', sa.Float(), nullable=True, comment='The cointegration p-value for the asset group'),
    sa.Column('ol_mu', sa.Float(), nullable=True, comment='The mu parameter for the Ornstein-Uhlenbeck process'),
    sa.Column('ol_theta', sa.Float(), nullable=True, comment='The theta parameter for the Ornstein-Uhlenbeck process'),
    sa.Column('ol_sigma', sa.Float(), nullable=True, comment='The sigma parameter for the Ornstein-Uhlenbeck process'),
    sa.Column('linear_fit_alpha', sa.Float(), nullable=True, comment='The alpha parameter (intercept) for the linear fit equation y = alpha + beta * X, where X is the first asset in the group (order matters)'),
    sa.Column('linear_fit_beta', sa.Float(), nullable=True, comment='The beta parameter (slope) for the linear fit equation y = alpha + beta * X, where X is the first asset in the group (order matters)'),
    sa.Column('linear_fit_mse', sa.Float(), nullable=True, comment='The mean squared error (MSE) of the linear fit between the first asset (X) and the second asset (Y) in the group. Asset order in the group determines which asset is used as the independent variable.'),
    sa.ForeignKeyConstraint(['asset_group_id'], ['asset_group.id'], ),
    sa.ForeignKeyConstraint(['provider_id'], ['provider.id'], ),
    sa.PrimaryKeyConstraint('timestamp', 'provider_id', 'asset_group_id', 'lookback_window_seconds', name=op.f('provider_asset_group_attribute_pkey')),
    comment='The provider asset group attribute, will store shared attributes for asset groups from providers such as cointegration p-value and OL process parameters.'
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('provider_asset_group_attribute')
    op.drop_table('asset_group_member')
    op.drop_table('asset_group')
    # ### end Alembic commands ###
