"""Adding tables for storing asset group attributes

Revision ID: e754424c6549
Revises: 0363c25292b7
Create Date: 2025-09-20 12:33:29.508510

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "e754424c6549"
down_revision: Union[str, Sequence[str], None] = "0363c25292b7"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "provider_asset_group",
        sa.Column(
            "id",
            sa.Integer(),
            nullable=False,
            comment="The unique identifier of the asset group",
        ),
        sa.Column(
            "name",
            sa.String(length=100),
            nullable=False,
            comment="The name of the asset group",
        ),
        sa.Column(
            "description",
            sa.String(length=1000),
            nullable=True,
            comment="The description of the asset group",
        ),
        sa.Column(
            "is_active",
            sa.Boolean(),
            nullable=False,
            comment="Whether the asset group is active",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
            comment="The timestamp of the creation of the asset group",
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
            comment="The timestamp of the last update of the asset group",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("provider_asset_group_pkey")),
        comment="The provider asset group, will store groups of assets that share common attributes.",
    )
    op.create_table(
        "provider_asset_group_attribute",
        sa.Column(
            "timestamp",
            sa.DateTime(),
            nullable=False,
            comment="The timestamp of the provider asset group attributes",
        ),
        sa.Column(
            "provider_asset_group_id",
            sa.Integer(),
            nullable=False,
            comment="The identifier of the provider asset group",
        ),
        sa.Column(
            "lookback_window_seconds",
            sa.Integer(),
            nullable=False,
            comment="The lookback window in seconds used for the calculation",
        ),
        sa.Column(
            "cointegration_p_value",
            sa.Float(),
            nullable=True,
            comment="The cointegration p-value for the asset group",
        ),
        sa.Column(
            "ol_mu",
            sa.Float(),
            nullable=True,
            comment="The mu parameter for the Ornstein-Uhlenbeck process",
        ),
        sa.Column(
            "ol_theta",
            sa.Float(),
            nullable=True,
            comment="The theta parameter for the Ornstein-Uhlenbeck process",
        ),
        sa.Column(
            "ol_sigma",
            sa.Float(),
            nullable=True,
            comment="The sigma parameter for the Ornstein-Uhlenbeck process",
        ),
        sa.Column(
            "linear_fit_alpha",
            sa.Float(),
            nullable=True,
            comment="The alpha parameter (intercept) for the linear fit equation to_asset_2 = alpha + beta * to_asset_1. The numbers correspond to the order in the asset group member table (to_asset_1 = to_asset_id with order of 1, to_asset_2 = to_asset_id with order of 2). From RollingOLS.params[-1, 0] when using sm.add_constant()",
        ),
        sa.Column(
            "linear_fit_beta",
            sa.Float(),
            nullable=True,
            comment="The beta parameter (slope) for the linear fit equation to_asset_2 = alpha + beta * to_asset_1. The numbers correspond to the order in the asset group member table (to_asset_1 = to_asset_id with order of 1, to_asset_2 = to_asset_id with order of 2). From RollingOLS.params[-1, 1] when using sm.add_constant()",
        ),
        sa.Column(
            "linear_fit_mse",
            sa.Float(),
            nullable=True,
            comment="The mean squared error (MSE) of the linear fit between to_asset_1 (independent variable) and to_asset_2 (dependent variable) in the asset group pair. The numbers correspond to the order in the asset group member table (to_asset_1 = to_asset_id with order of 1, to_asset_2 = to_asset_id with order of 2). From RollingOLS.mse_resid",
        ),
        sa.Column(
            "linear_fit_r_squared",
            sa.Float(),
            nullable=True,
            comment="The R-squared (coefficient of determination) of the linear fit, indicating the proportion of variance explained by the regression. From RollingOLS.rsquared",
        ),
        sa.Column(
            "linear_fit_r_squared_adj",
            sa.Float(),
            nullable=True,
            comment="The adjusted R-squared of the linear fit, accounting for the number of predictors. From RollingOLS.rsquared_adj",
        ),
        sa.ForeignKeyConstraint(
            ["provider_asset_group_id"],
            ["provider_asset_group.id"],
        ),
        sa.PrimaryKeyConstraint(
            "timestamp",
            "provider_asset_group_id",
            "lookback_window_seconds",
            name=op.f("provider_asset_group_attribute_pkey"),
        ),
        comment="The provider asset group attribute, will store shared attributes for asset groups from providers such as cointegration p-value and OL process parameters.",
    )
    op.create_table(
        "provider_asset_group_member",
        sa.Column(
            "provider_asset_group_id",
            sa.Integer(),
            nullable=False,
            comment="The identifier of the provider asset group",
        ),
        sa.Column(
            "provider_id",
            sa.Integer(),
            nullable=False,
            comment="The identifier of the provider",
        ),
        sa.Column(
            "from_asset_id",
            sa.Integer(),
            nullable=False,
            comment="The identifier of the from asset (base asset)",
        ),
        sa.Column(
            "to_asset_id",
            sa.Integer(),
            nullable=False,
            comment="The identifier of the to asset (quote asset)",
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
            comment="The timestamp of the creation of the asset group member",
        ),
        sa.ForeignKeyConstraint(
            ["from_asset_id"],
            ["asset.id"],
        ),
        sa.ForeignKeyConstraint(
            ["provider_asset_group_id"],
            ["provider_asset_group.id"],
        ),
        sa.ForeignKeyConstraint(
            ["provider_id"],
            ["provider.id"],
        ),
        sa.ForeignKeyConstraint(
            ["to_asset_id"],
            ["asset.id"],
        ),
        sa.PrimaryKeyConstraint(
            "provider_asset_group_id",
            "provider_id",
            "from_asset_id",
            "to_asset_id",
            name=op.f("provider_asset_group_member_pkey"),
        ),
        comment="The provider asset group member, will store pairs of assets that belong to groups for pairs trading across different providers.",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("provider_asset_group_member")
    op.drop_table("provider_asset_group_attribute")
    op.drop_table("provider_asset_group")
    # ### end Alembic commands ###
